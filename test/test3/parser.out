Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LPAREN
    RPAREN

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> expression
Rule 3     program -> function_def
Rule 4     expression -> NUMBER
Rule 5     expression -> IDENTIFIER
Rule 6     expression -> expression PLUS expression
Rule 7     function_def -> FUNCTION IDENTIFIER LBRACKET expression RBRACKET
Rule 8     statement -> IDENTIFIER EQUALS expression

Terminals, with rules where they appear

EQUALS               : 8
FUNCTION             : 7
IDENTIFIER           : 5 7 8
LBRACKET             : 7
LPAREN               : 
NUMBER               : 4
PLUS                 : 6
RBRACKET             : 7
RPAREN               : 
error                : 

Nonterminals, with rules where they appear

expression           : 2 6 6 7 8
function_def         : 3
program              : 0
statement            : 1

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . expression
    (3) program -> . function_def
    (8) statement -> . IDENTIFIER EQUALS expression
    (4) expression -> . NUMBER
    (5) expression -> . IDENTIFIER
    (6) expression -> . expression PLUS expression
    (7) function_def -> . FUNCTION IDENTIFIER LBRACKET expression RBRACKET

    IDENTIFIER      shift and go to state 5
    NUMBER          shift and go to state 6
    FUNCTION        shift and go to state 7

    program                        shift and go to state 1
    statement                      shift and go to state 2
    expression                     shift and go to state 3
    function_def                   shift and go to state 4

state 1

    (0) S' -> program .



state 2

    (1) program -> statement .

    $end            reduce using rule 1 (program -> statement .)


state 3

    (2) program -> expression .
    (6) expression -> expression . PLUS expression

    $end            reduce using rule 2 (program -> expression .)
    PLUS            shift and go to state 8


state 4

    (3) program -> function_def .

    $end            reduce using rule 3 (program -> function_def .)


state 5

    (8) statement -> IDENTIFIER . EQUALS expression
    (5) expression -> IDENTIFIER .

    EQUALS          shift and go to state 9
    PLUS            reduce using rule 5 (expression -> IDENTIFIER .)
    $end            reduce using rule 5 (expression -> IDENTIFIER .)


state 6

    (4) expression -> NUMBER .

    PLUS            reduce using rule 4 (expression -> NUMBER .)
    $end            reduce using rule 4 (expression -> NUMBER .)
    RBRACKET        reduce using rule 4 (expression -> NUMBER .)


state 7

    (7) function_def -> FUNCTION . IDENTIFIER LBRACKET expression RBRACKET

    IDENTIFIER      shift and go to state 10


state 8

    (6) expression -> expression PLUS . expression
    (4) expression -> . NUMBER
    (5) expression -> . IDENTIFIER
    (6) expression -> . expression PLUS expression

    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 12

    expression                     shift and go to state 11

state 9

    (8) statement -> IDENTIFIER EQUALS . expression
    (4) expression -> . NUMBER
    (5) expression -> . IDENTIFIER
    (6) expression -> . expression PLUS expression

    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 12

    expression                     shift and go to state 13

state 10

    (7) function_def -> FUNCTION IDENTIFIER . LBRACKET expression RBRACKET

    LBRACKET        shift and go to state 14


state 11

    (6) expression -> expression PLUS expression .
    (6) expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    $end            reduce using rule 6 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 6 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 8

  ! PLUS            [ reduce using rule 6 (expression -> expression PLUS expression .) ]


state 12

    (5) expression -> IDENTIFIER .

    PLUS            reduce using rule 5 (expression -> IDENTIFIER .)
    $end            reduce using rule 5 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 5 (expression -> IDENTIFIER .)


state 13

    (8) statement -> IDENTIFIER EQUALS expression .
    (6) expression -> expression . PLUS expression

    $end            reduce using rule 8 (statement -> IDENTIFIER EQUALS expression .)
    PLUS            shift and go to state 8


state 14

    (7) function_def -> FUNCTION IDENTIFIER LBRACKET . expression RBRACKET
    (4) expression -> . NUMBER
    (5) expression -> . IDENTIFIER
    (6) expression -> . expression PLUS expression

    NUMBER          shift and go to state 6
    IDENTIFIER      shift and go to state 12

    expression                     shift and go to state 15

state 15

    (7) function_def -> FUNCTION IDENTIFIER LBRACKET expression . RBRACKET
    (6) expression -> expression . PLUS expression

    RBRACKET        shift and go to state 16
    PLUS            shift and go to state 8


state 16

    (7) function_def -> FUNCTION IDENTIFIER LBRACKET expression RBRACKET .

    $end            reduce using rule 7 (function_def -> FUNCTION IDENTIFIER LBRACKET expression RBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 11 resolved as shift
