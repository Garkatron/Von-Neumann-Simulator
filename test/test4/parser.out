Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LPAREN
    RPAREN

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression
Rule 2     statement -> IDENTIFIER EQUALS expression
Rule 3     expression -> expression PLUS expression
Rule 4     statement -> FUNCTION IDENTIFIER LBRACKET statements RBRACKET
Rule 5     statement -> FUNCTION IDENTIFIER LBRACKET RBRACKET
Rule 6     expression -> IDENTIFIER
Rule 7     statement -> CALL IDENTIFIER
Rule 8     expression -> NUMBER
Rule 9     statements -> statements statement
Rule 10    statements -> statement

Terminals, with rules where they appear

CALL                 : 7
EQUALS               : 2
FUNCTION             : 4 5
IDENTIFIER           : 2 4 5 6 7
LBRACKET             : 4 5
LPAREN               : 
NUMBER               : 8
PLUS                 : 3
RBRACKET             : 4 5
RPAREN               : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 2 3 3
statement            : 9 10 0
statements           : 4 9

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression
    (2) statement -> . IDENTIFIER EQUALS expression
    (4) statement -> . FUNCTION IDENTIFIER LBRACKET statements RBRACKET
    (5) statement -> . FUNCTION IDENTIFIER LBRACKET RBRACKET
    (7) statement -> . CALL IDENTIFIER
    (3) expression -> . expression PLUS expression
    (6) expression -> . IDENTIFIER
    (8) expression -> . NUMBER

    IDENTIFIER      shift and go to state 3
    FUNCTION        shift and go to state 4
    CALL            shift and go to state 5
    NUMBER          shift and go to state 6

    statement                      shift and go to state 1
    expression                     shift and go to state 2

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression .
    (3) expression -> expression . PLUS expression

    $end            reduce using rule 1 (statement -> expression .)
    RBRACKET        reduce using rule 1 (statement -> expression .)
    IDENTIFIER      reduce using rule 1 (statement -> expression .)
    FUNCTION        reduce using rule 1 (statement -> expression .)
    CALL            reduce using rule 1 (statement -> expression .)
    NUMBER          reduce using rule 1 (statement -> expression .)
    PLUS            shift and go to state 7


state 3

    (2) statement -> IDENTIFIER . EQUALS expression
    (6) expression -> IDENTIFIER .

    EQUALS          shift and go to state 8
    PLUS            reduce using rule 6 (expression -> IDENTIFIER .)
    $end            reduce using rule 6 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 6 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 6 (expression -> IDENTIFIER .)
    FUNCTION        reduce using rule 6 (expression -> IDENTIFIER .)
    CALL            reduce using rule 6 (expression -> IDENTIFIER .)
    NUMBER          reduce using rule 6 (expression -> IDENTIFIER .)


state 4

    (4) statement -> FUNCTION . IDENTIFIER LBRACKET statements RBRACKET
    (5) statement -> FUNCTION . IDENTIFIER LBRACKET RBRACKET

    IDENTIFIER      shift and go to state 9


state 5

    (7) statement -> CALL . IDENTIFIER

    IDENTIFIER      shift and go to state 10


state 6

    (8) expression -> NUMBER .

    PLUS            reduce using rule 8 (expression -> NUMBER .)
    $end            reduce using rule 8 (expression -> NUMBER .)
    RBRACKET        reduce using rule 8 (expression -> NUMBER .)
    IDENTIFIER      reduce using rule 8 (expression -> NUMBER .)
    FUNCTION        reduce using rule 8 (expression -> NUMBER .)
    CALL            reduce using rule 8 (expression -> NUMBER .)
    NUMBER          reduce using rule 8 (expression -> NUMBER .)


state 7

    (3) expression -> expression PLUS . expression
    (3) expression -> . expression PLUS expression
    (6) expression -> . IDENTIFIER
    (8) expression -> . NUMBER

    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 6

    expression                     shift and go to state 11

state 8

    (2) statement -> IDENTIFIER EQUALS . expression
    (3) expression -> . expression PLUS expression
    (6) expression -> . IDENTIFIER
    (8) expression -> . NUMBER

    IDENTIFIER      shift and go to state 12
    NUMBER          shift and go to state 6

    expression                     shift and go to state 13

state 9

    (4) statement -> FUNCTION IDENTIFIER . LBRACKET statements RBRACKET
    (5) statement -> FUNCTION IDENTIFIER . LBRACKET RBRACKET

    LBRACKET        shift and go to state 14


state 10

    (7) statement -> CALL IDENTIFIER .

    $end            reduce using rule 7 (statement -> CALL IDENTIFIER .)
    RBRACKET        reduce using rule 7 (statement -> CALL IDENTIFIER .)
    IDENTIFIER      reduce using rule 7 (statement -> CALL IDENTIFIER .)
    FUNCTION        reduce using rule 7 (statement -> CALL IDENTIFIER .)
    CALL            reduce using rule 7 (statement -> CALL IDENTIFIER .)
    NUMBER          reduce using rule 7 (statement -> CALL IDENTIFIER .)


state 11

    (3) expression -> expression PLUS expression .
    (3) expression -> expression . PLUS expression

  ! shift/reduce conflict for PLUS resolved as shift
    $end            reduce using rule 3 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 3 (expression -> expression PLUS expression .)
    IDENTIFIER      reduce using rule 3 (expression -> expression PLUS expression .)
    FUNCTION        reduce using rule 3 (expression -> expression PLUS expression .)
    CALL            reduce using rule 3 (expression -> expression PLUS expression .)
    NUMBER          reduce using rule 3 (expression -> expression PLUS expression .)
    PLUS            shift and go to state 7

  ! PLUS            [ reduce using rule 3 (expression -> expression PLUS expression .) ]


state 12

    (6) expression -> IDENTIFIER .

    PLUS            reduce using rule 6 (expression -> IDENTIFIER .)
    $end            reduce using rule 6 (expression -> IDENTIFIER .)
    RBRACKET        reduce using rule 6 (expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 6 (expression -> IDENTIFIER .)
    FUNCTION        reduce using rule 6 (expression -> IDENTIFIER .)
    CALL            reduce using rule 6 (expression -> IDENTIFIER .)
    NUMBER          reduce using rule 6 (expression -> IDENTIFIER .)


state 13

    (2) statement -> IDENTIFIER EQUALS expression .
    (3) expression -> expression . PLUS expression

    $end            reduce using rule 2 (statement -> IDENTIFIER EQUALS expression .)
    RBRACKET        reduce using rule 2 (statement -> IDENTIFIER EQUALS expression .)
    IDENTIFIER      reduce using rule 2 (statement -> IDENTIFIER EQUALS expression .)
    FUNCTION        reduce using rule 2 (statement -> IDENTIFIER EQUALS expression .)
    CALL            reduce using rule 2 (statement -> IDENTIFIER EQUALS expression .)
    NUMBER          reduce using rule 2 (statement -> IDENTIFIER EQUALS expression .)
    PLUS            shift and go to state 7


state 14

    (4) statement -> FUNCTION IDENTIFIER LBRACKET . statements RBRACKET
    (5) statement -> FUNCTION IDENTIFIER LBRACKET . RBRACKET
    (9) statements -> . statements statement
    (10) statements -> . statement
    (1) statement -> . expression
    (2) statement -> . IDENTIFIER EQUALS expression
    (4) statement -> . FUNCTION IDENTIFIER LBRACKET statements RBRACKET
    (5) statement -> . FUNCTION IDENTIFIER LBRACKET RBRACKET
    (7) statement -> . CALL IDENTIFIER
    (3) expression -> . expression PLUS expression
    (6) expression -> . IDENTIFIER
    (8) expression -> . NUMBER

    RBRACKET        shift and go to state 16
    IDENTIFIER      shift and go to state 3
    FUNCTION        shift and go to state 4
    CALL            shift and go to state 5
    NUMBER          shift and go to state 6

    statements                     shift and go to state 15
    statement                      shift and go to state 17
    expression                     shift and go to state 2

state 15

    (4) statement -> FUNCTION IDENTIFIER LBRACKET statements . RBRACKET
    (9) statements -> statements . statement
    (1) statement -> . expression
    (2) statement -> . IDENTIFIER EQUALS expression
    (4) statement -> . FUNCTION IDENTIFIER LBRACKET statements RBRACKET
    (5) statement -> . FUNCTION IDENTIFIER LBRACKET RBRACKET
    (7) statement -> . CALL IDENTIFIER
    (3) expression -> . expression PLUS expression
    (6) expression -> . IDENTIFIER
    (8) expression -> . NUMBER

    RBRACKET        shift and go to state 18
    IDENTIFIER      shift and go to state 3
    FUNCTION        shift and go to state 4
    CALL            shift and go to state 5
    NUMBER          shift and go to state 6

    statement                      shift and go to state 19
    expression                     shift and go to state 2

state 16

    (5) statement -> FUNCTION IDENTIFIER LBRACKET RBRACKET .

    $end            reduce using rule 5 (statement -> FUNCTION IDENTIFIER LBRACKET RBRACKET .)
    RBRACKET        reduce using rule 5 (statement -> FUNCTION IDENTIFIER LBRACKET RBRACKET .)
    IDENTIFIER      reduce using rule 5 (statement -> FUNCTION IDENTIFIER LBRACKET RBRACKET .)
    FUNCTION        reduce using rule 5 (statement -> FUNCTION IDENTIFIER LBRACKET RBRACKET .)
    CALL            reduce using rule 5 (statement -> FUNCTION IDENTIFIER LBRACKET RBRACKET .)
    NUMBER          reduce using rule 5 (statement -> FUNCTION IDENTIFIER LBRACKET RBRACKET .)


state 17

    (10) statements -> statement .

    RBRACKET        reduce using rule 10 (statements -> statement .)
    IDENTIFIER      reduce using rule 10 (statements -> statement .)
    FUNCTION        reduce using rule 10 (statements -> statement .)
    CALL            reduce using rule 10 (statements -> statement .)
    NUMBER          reduce using rule 10 (statements -> statement .)


state 18

    (4) statement -> FUNCTION IDENTIFIER LBRACKET statements RBRACKET .

    $end            reduce using rule 4 (statement -> FUNCTION IDENTIFIER LBRACKET statements RBRACKET .)
    RBRACKET        reduce using rule 4 (statement -> FUNCTION IDENTIFIER LBRACKET statements RBRACKET .)
    IDENTIFIER      reduce using rule 4 (statement -> FUNCTION IDENTIFIER LBRACKET statements RBRACKET .)
    FUNCTION        reduce using rule 4 (statement -> FUNCTION IDENTIFIER LBRACKET statements RBRACKET .)
    CALL            reduce using rule 4 (statement -> FUNCTION IDENTIFIER LBRACKET statements RBRACKET .)
    NUMBER          reduce using rule 4 (statement -> FUNCTION IDENTIFIER LBRACKET statements RBRACKET .)


state 19

    (9) statements -> statements statement .

    RBRACKET        reduce using rule 9 (statements -> statements statement .)
    IDENTIFIER      reduce using rule 9 (statements -> statements statement .)
    FUNCTION        reduce using rule 9 (statements -> statements statement .)
    CALL            reduce using rule 9 (statements -> statements statement .)
    NUMBER          reduce using rule 9 (statements -> statements statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 11 resolved as shift
